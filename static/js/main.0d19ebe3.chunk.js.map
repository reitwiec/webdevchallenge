{"version":3,"sources":["logo.svg","components/Countdown.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Timer","styled","div","Countdown","calculateTimeLeft","difference","Date","timeLeft","days","Math","floor","hours","minutes","seconds","useState","setTimeLeft","useEffect","setTimeout","timerComponents","Object","keys","forEach","interval","push","length","Container","App","window","innerWidth","style","textAlign","padding","className","textDecoration","color","fontWeight","fontSize","border","marginTop","src","width","height","frameborder","marginheight","marginwidth","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+JAAAA,EAAOC,QAAU,IAA0B,kC,oXCG3C,IAAMC,EAAQC,IAAOC,IAAV,KAUI,SAASC,IACpB,IAAMC,EAAoB,WACtB,IAAMC,GAAc,IAAIC,KAAK,kCAAoC,IAAIA,KACjEC,EAAW,GAWf,OATIF,EAAa,IACbE,EAAW,CACPC,KAAMC,KAAKC,MAAML,EAAU,OAC3BM,MAAOF,KAAKC,MAAOL,EAAU,KAAuB,IACpDO,QAASH,KAAKC,MAAOL,EAAa,IAAO,GAAM,IAC/CQ,QAASJ,KAAKC,MAAOL,EAAa,IAAQ,MAI3CE,GAdqB,EAiBAO,mBAASV,KAjBT,mBAiBzBG,EAjByB,KAiBfQ,EAjBe,KAmBhCC,qBAAU,WACNC,YAAW,WACPF,EAAYX,OACb,QAGP,IAAMc,EAAkB,GAcxB,OAZAC,OAAOC,KAAKb,GAAUc,SAAQ,SAAAC,GACrBf,EAASe,IAIdJ,EAAgBK,KACZ,8BACKhB,EAASe,GADd,IAC0BA,EAAU,SAMxC,kBAACtB,EAAD,KACKkB,EAAgBM,OAASN,EAAkB,6C,shBChDxD,IAAMO,EAAYxB,IAAOC,IAAV,KA6EAwB,MAhDf,WACE,OACEC,OAAOC,WAAa,IAAO,yBAAKC,MAAO,CAAEC,UAAW,SAAUC,QAAS,SAAU,kBAAC5B,EAAD,MAAtD,mBAA6F,kBAACsB,EAAD,KACtH,kBAACtB,EAAD,MACA,yBAAK6B,UAAU,SAAf,yCAGA,6BACE,wBAAIH,MAAO,CAAEI,eAAgB,YAAaC,MAAO,YAAjD,WACA,uBAAGL,MAAO,CAAEM,WAAY,IAAKC,SAAU,OAAQF,MAAO,UAAWG,OAAQ,oBAAqBN,QAAS,SAAvG,WAAyH,uBAAGF,MAAO,CAAEM,WAAY,MAAxB,sBAAzH,sEACA,mGACA,4BACE,mDACA,8DACA,gEACA,iEACA,kFAEF,uBAAGN,MAAO,CAAEM,WAAY,IAAKF,eAAgB,YAAaC,MAAO,YAAjE,iBACA,4BACE,wDACA,8DACA,8DACA,mDAAwB,4BAAQL,MAAO,CAAEK,MAAO,YAAxB,wBAAxB,mBAEF,uBAAGL,MAAO,CAAEM,WAAY,IAAKF,eAAgB,YAAaC,MAAO,YAAjE,yBACA,4BACE,kCAAO,4BAAQL,MAAO,CAAEK,MAAO,YAAxB,SAAP,kCACA,4BAAI,4BAAQL,MAAO,CAAEK,MAAO,YAAxB,4BACJ,oHACA,uHAGF,uBAAGL,MAAO,CAAEM,WAAY,IAAKF,eAAgB,YAAaC,MAAO,YAAjE,wCACA,4BACE,mCACA,sCACA,uDAGF,yBAAKL,MAAO,CAAEC,UAAW,SAAUQ,UAAW,SAC5C,4BAAQC,IAAI,oHAAoHC,MAAM,MAAMC,OAAO,OAAOC,YAAY,IAAIC,aAAa,IAAIC,YAAY,KAAvM,qBChEUC,QACW,cAA7BlB,OAAOmB,SAASC,UAEe,UAA7BpB,OAAOmB,SAASC,UAEhBpB,OAAOmB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0d19ebe3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useEffect, useState } from \"react\";\nimport styled from 'styled-components';\n\nconst Timer = styled.div`\n    width:100%;\n    text-align:center;\n    font-size:50px;\n    font-weight:900;\n    letter-spacing:2px;\n    color:#252C33;\n    text-transform:capitalize;\n`;\n\nexport default function Countdown() {\n    const calculateTimeLeft = () => {\n        const difference = +new Date(\"2020-05-05T00:00:00.000-06:30\") - +new Date();\n        let timeLeft = {};\n\n        if (difference > 0) {\n            timeLeft = {\n                days: Math.floor(difference / (1000 * 60 * 60 * 24)),\n                hours: Math.floor((difference / (1000 * 60 * 60)) % 24),\n                minutes: Math.floor((difference / 1000 / 60) % 60),\n                seconds: Math.floor((difference / 1000) % 60)\n            };\n        }\n\n        return timeLeft;\n    };\n\n    const [timeLeft, setTimeLeft] = useState(calculateTimeLeft());\n\n    useEffect(() => {\n        setTimeout(() => {\n            setTimeLeft(calculateTimeLeft());\n        }, 1000);\n    });\n\n    const timerComponents = [];\n\n    Object.keys(timeLeft).forEach(interval => {\n        if (!timeLeft[interval]) {\n            return;\n        }\n\n        timerComponents.push(\n            <span>\n                {timeLeft[interval]} {interval}{\" \"}\n            </span>\n        );\n    });\n\n    return (\n        <Timer>\n            {timerComponents.length ? timerComponents : <span>Time's up!</span>}\n        </Timer>\n    );\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Countdown from './components/Countdown';\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n  padding:50px;\nmin-height:100vh;\n  margin-left:300px;\n  margin-right:300px;\n  .title{\n    padding:20px;\n    width:100%;\n    text-align:left;\n    margin-top:50px;\n    font-size:35px;\n    font-weight:900;\n    color:#46535E;\n    letter-spacing:2px;\n    border-bottom:2px solid #E5E7E8;\n  }\n  h2{\n    color:#46535E;\n  }\n  p{\n    font-size:25px;\n    color:#46535E;\n  }\n  li{\n    font-size:20px;\n    color:#46535E;\n    line-height:40px;\n  }\n`;\nfunction App() {\n  return (\n    window.innerWidth < 600 ? (<div style={{ textAlign: 'center', padding: '30px' }}><Countdown />Open on desktop</div>) : (<Container>\n      <Countdown />\n      <div className=\"title\">\n        IECSE WEB Head and DEV Head Challenge\n      </div>\n      <div>\n        <h2 style={{ textDecoration: \"underline\", color: \"#252C33\" }}>#Prompt</h2>\n        <p style={{ fontWeight: 500, fontSize: \"30px\", color: \"#252C33\", border: \"2px solid #252C33\", padding: \"20px\" }}>Build a <i style={{ fontWeight: 900 }}>Dribbble for IECSE</i> website or an application using any of your preferred tech-stack.</p>\n        <p>You have to implement as many of the following features as possible:</p>\n        <ul>\n          <li>User Authentication</li>\n          <li>Upload designs to an S3 bucket</li>\n          <li>Allow user to add a personal bio</li>\n          <li>Feature to follow other designers</li>\n          <li>Feature to like designs posted by other designers</li>\n        </ul>\n        <p style={{ fontWeight: 500, textDecoration: \"underline\", color: \"#252C33\" }}>Bonus Points:</p>\n        <ul>\n          <li>Save other users designs</li>\n          <li>Comment on other users designs</li>\n          <li>Mention a user in the comments</li>\n          <li>Deploy your website <strong style={{ color: \"#252C33\" }}>(Heroku not allowed)</strong> / Release apk</li>\n        </ul>\n        <p style={{ fontWeight: 500, textDecoration: \"underline\", color: \"#252C33\" }}>Judgement and Advice:</p>\n        <ul>\n          <li>We <strong style={{ color: \"#252C33\" }}>don't</strong> expect a perfect end product.</li>\n          <li><strong style={{ color: \"#252C33\" }}>Play to your strengths.</strong></li>\n          <li>If you are more inclined towards backend development, usage of templates is allowed.</li>\n          <li>If you have any queries regarding the challenge, message any one of us from the board.</li>\n        </ul>\n\n        <p style={{ fontWeight: 500, textDecoration: \"underline\", color: \"#252C33\" }}>Readup on these topics for the test:</p>\n        <ul>\n          <li>Git</li>\n          <li>DevOps</li>\n          <li>Basic Network Security</li>\n        </ul>\n\n        <div style={{ textAlign: \"center\", marginTop: '50px' }}>\n          <iframe src=\"https://docs.google.com/forms/d/e/1FAIpQLSfLNLHSniHLNmggStJvB76AdMSbaPVWuCWSkYDl2J2miWeByw/viewform?embedded=true\" width=\"640\" height=\"1145\" frameborder=\"0\" marginheight=\"0\" marginwidth=\"0\">Loadingâ€¦</iframe>\n        </div>\n      </div>\n    </Container>)\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}